# -*- coding: utf-8 -*-
"""Gaussian Resolution.py

Automatically generated by Colab.

"""

import numpy as np
import matplotlib.pyplot as plt


dx_true = 0.1   # km, dense sampling for "truth"
x = np.arange(-30, 30+dx_true, dx_true)
FWHM = 6.0      # km
sigma = FWHM / (2*np.sqrt(2*np.log(2)))
A_true = 10.0   # arbitrary amplitude (e.g., 10 mGal or 10 nT)
y_true = A_true * np.exp(-(x**2)/(2*sigma**2))


dx_coarse = 4.0
x_coarse = np.arange(-28, 28+dx_coarse, dx_coarse)   # align to near-center
# pick the closest indices from the dense grid
idx = np.searchsorted(x, x_coarse)
y_samp = y_true[idx.clip(max=len(x)-1)]


y_avg = []
x_bins = []
for i in range(len(x_coarse)-1):
    mask = (x >= x_coarse[i]) & (x < x_coarse[i+1])
    if np.any(mask):
        y_avg.append(np.nanmean(y_true[mask]))
        x_bins.append(0.5*(x_coarse[i]+x_coarse[i+1]))
y_avg = np.array(y_avg); x_bins = np.array(x_bins)


peak_true = y_true.max()
peak_samp = y_samp.max()
peak_avg  = y_avg.max()

atten_samp = peak_samp/peak_true
atten_avg  = peak_avg/peak_true

print(f"Peak attenuation (sampled 4 km): {atten_samp:.2f}Ã— of true")
print(f"Peak attenuation (4 km bin-averaged): {atten_avg:.2f}Ã— of true")



plt.figure(figsize=(6,3))
plt.plot(x, y_true, lw=2, label="Truth (0.1 km)")


markerline, stemlines, baseline = plt.stem(
    x_coarse, y_samp,
    basefmt=" ",         # blank baseline
    markerfmt="o",       # circle markers
    linefmt="C1-",       # orange stems
    label="Sampled at 4 km"
)

try:
    baseline.set_visible(False)
except Exception:
    pass

plt.plot(x_bins, y_avg, "C2-s", label="Avg. in 4 km bins")

plt.xlabel("Distance (km)")
plt.ylabel("Amplitude (units)")
plt.title("Resolution test for a 6 km feature")
plt.legend()
plt.tight_layout()
plt.show()
